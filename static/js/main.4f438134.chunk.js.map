{"version":3,"sources":["components/Logo.js","components/Layer.js","components/Description.js","data/merged.js","App.js","serviceWorker.js","index.js"],"names":["Logo","style","width","height","viewBox","className","id","stroke","strokeWidth","fill","fillRule","transform","points","cx","cy","r","d","strokeLinecap","Component","Layer","this","props","client","map","source","cartoSource","carto","SQL","cartoCSS","CartoCSS","layer","addLayer","getLeafletLayer","addTo","Description","App","state","undefined","center","zoom","cartoClient","Client","apiKey","process","username","setState","Map","ref","node","leafletElement","attribution","url","merged","hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUA4CeA,E,uKAtCP,OACI,yBAAKC,MAAO,GAAIC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,cAAcC,UAAU,IACnE,0CACA,sDACA,uBAAGC,GAAG,SAASC,OAAO,OAAOC,YAAY,IAAIC,KAAK,OAAOC,SAAS,WAC9D,uBAAGJ,GAAG,OAAOK,UAAU,qCACnB,uBAAGL,GAAG,SAASK,UAAU,kCACrB,uBACIL,GAAG,UACHK,UAAU,wHAEV,6BAASL,GAAG,UAAUC,OAAO,UAAUC,YAAY,IAAII,OAAO,yCAC9D,4BAAQN,GAAG,OAAOG,KAAK,UAAUI,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACnD,uBACIT,GAAG,QACHK,UAAU,uHAEV,uBACIA,UAAU,sHAEV,0BAAMK,EAAE,2CAA2CV,GAAG,OAAOC,OAAO,UAAUU,cAAc,WAC5F,6BACIX,GAAG,WACHG,KAAK,UACLE,UAAU,uFACVC,OAAO,kF,GA3BhCM,aCqBJC,E,kLApBQ,IAAD,EACqBC,KAAKC,MAApCC,EADU,EACVA,OAAQC,EADE,EACFA,IAAKC,EADH,EACGA,OAAQvB,EADX,EACWA,MAGvBwB,EAAc,IAAIC,IAAMF,OAAOG,IAAIH,GACnCI,EAAW,IAAIF,IAAMzB,MAAM4B,SAAS5B,GACpC6B,EAAQ,IAAIJ,IAAMI,MAAMX,MAAMM,EAAaG,GAGjDN,EAAOS,SAASD,GAChBR,EAAOU,kBAAkBC,MAAMV,K,+BAM/B,OAAO,S,GAlBSL,aCYLgB,G,6KARX,OACE,yBAAK7B,UAAU,eACX,uBAAGA,UAAU,oBAAb,iC,GALgBa,cCJX,EACP,qVADO,EAYN,qCCuCMiB,G,kNAtCbC,MAAQ,CACNb,SAAKc,EACLC,OAAQ,CAAC,MAAO,OAChBC,KAAM,I,EAIRC,YAAc,IAAId,IAAMe,OAAO,CAC7BC,OAAQC,yBACRC,SAAUD,kB,kEAIVvB,KAAKyB,SAAS,CAAEtB,IAAKH,KAAKG,Q,+BAGlB,IAAD,SACuBH,KAAKgB,MAA3Bb,EADD,EACCA,IAAKe,EADN,EACMA,OAAQC,EADd,EACcA,KAErB,OACE,8BACE,kBAAC,EAAD,MACA,kBAACO,EAAA,EAAD,CAAKR,OAAQA,EAAQC,KAAMA,EAAMQ,IAAK,SAAAC,GAAU,EAAKzB,IAAMyB,GAAQA,EAAKC,iBACtE,kBAAC,IAAD,CAASC,YAAY,GAAGC,IA3BZ,2EA4BZ,kBAAC,EAAD,CACE5B,IAAKA,EACLC,OAAQ4B,EACRnD,MAAOmD,EACP9B,OAAQF,KAAKoB,YACba,QAAQ,KAGZ,kBAAC,EAAD,W,GAlCUnC,cCCEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f438134.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\n\n\nclass Logo extends Component {\n    render() {\n        return (\n            <svg style={{}} width='40' height='60' viewBox='0 -10 50 60' className=''>\n                <title>gs_icon</title>\n                <desc>Created with Sketch.</desc>\n                <g id=\"Page-1\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    <g id=\"Home\" transform=\"translate(-23.000000, -13.000000)\">\n                        <g id=\"navbar\" transform=\"translate(14.000000, 9.000000)\">\n                            <g\n                                id=\"gs_icon\"\n                                transform=\"translate(34.000000, 32.500000) rotate(-330.000000) translate(-34.000000, -32.500000) translate(8.000000, 10.000000)\"\n                            >\n                                <polygon id=\"Polygon\" stroke=\"#17AD8D\" strokeWidth=\"3\" points=\"39 0 52 22.5 39 45 13 45 0 22.5 13 0\" />\n                                <circle id=\"Oval\" fill=\"#17AD8D\" cx=\"26\" cy=\"23\" r=\"4\" />\n                                <g\n                                    id=\"arrow\"\n                                    transform=\"translate(25.909903, 22.909903) rotate(-45.000000) translate(-25.909903, -22.909903) translate(6.409903, 11.909903)\"\n                                >\n                                    <g\n                                        transform=\"translate(19.500000, 11.000000) rotate(-23.000000) translate(-19.500000, -11.000000) translate(1.000000, 7.000000)\"\n                                    >\n                                        <path d=\"M0.701010127,4.00609665 L30.3218513,3.75\" id=\"Line\" stroke=\"#17AD8D\" strokeLinecap=\"square\" />\n                                        <polygon\n                                            id=\"Triangle\"\n                                            fill=\"#17AD8D\"\n                                            transform=\"translate(33.303990, 3.734325) rotate(-270.000000) translate(-33.303990, -3.734325) \"\n                                            points=\"33.3039897 0.976748951 36.6592529 6.49190047 29.9487266 6.49190047\"\n                                        />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n\nexport default Logo;","import { Component } from 'react';\nimport carto from '@carto/carto.js/carto';\n\nclass Layer extends Component {\n\n  componentDidMount() {\n    const { client, map, source, style } = this.props;\n\n    // Craete source, styles and layer with the given props\n    const cartoSource = new carto.source.SQL(source);\n    const cartoCSS = new carto.style.CartoCSS(style);\n    const layer = new carto.layer.Layer(cartoSource, cartoCSS);\n\n    // Add them to the client and to the map\n    client.addLayer(layer);\n    client.getLeafletLayer().addTo(map);\n  }\n\n  // ... missing methods to handle styles/source updates\n\n  render() {\n    return null;\n  }\n}\n\nexport default Layer;\n","import React from 'react';\nimport { Component } from 'react';\nimport './Description.css';\n\nclass Description extends Component {\n\n  render() {\n    return (\n      <div className=\"Description\">\n          <p className=\"Description-text\">React app using Carto.js</p>\n      </div>\n    );\n  }\n}\n\nexport default Description;\n","export default {\n  style:\n    `\n      #layer {\n        marker-width: 5;\n        marker-fill: ramp([id], (#ffe119, #4363d8, #3cb44b, #e6beff, #e6194b), (\"mr-blonde\", \"mr-blue\", \"mr-green\", \"mr-pink\", \"mr-red\"), \"=\");\n        marker-fill-opacity: 1;\n        marker-line-width: 0.5;\n        marker-line-color: #FFFFFF;\n        marker-line-opacity: 1;\n      }\n    `,\n  source:\n    `\n      SELECT * FROM merged\n    `\n};","import React, { Component } from 'react';\nimport { Map, TileLayer as Basemap } from 'react-leaflet';\nimport carto from '@carto/carto.js/carto';\nimport Logo from './components/Logo';\nimport Layer from './components/Layer';\nimport Description from './components/Description';\nimport merged from './data/merged';\nimport './App.css';\n\nconst CARTO_BASEMAP = 'https://{s}.basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png';\n\nclass App extends Component {\n  // Defines Map basic info\n  state = {\n    map: undefined,\n    center: [47.47, 19.13],\n    zoom: 11,\n  }\n\n  // Defines the entry point to communicate with Carto\n  cartoClient = new carto.Client({ \n    apiKey: process.env.REACT_APP_CARTO_API_KEY, \n    username: process.env.REACT_APP_CARTO_USER_NAME \n  });\n\n  componentDidMount() {\n    this.setState({ map: this.map });\n  }\n\n  render() {\n    const { map, center, zoom } = this.state;\n\n    return (\n      <main>\n        <Logo/>\n        <Map center={center} zoom={zoom} ref={node => { this.map = node && node.leafletElement }}>\n          <Basemap attribution=\"\" url={CARTO_BASEMAP} />\n          <Layer\n            map={map}\n            source={merged.source}\n            style={merged.style}\n            client={this.cartoClient}\n            hidden={false}\n          />\n        </Map>\n        <Description/>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}